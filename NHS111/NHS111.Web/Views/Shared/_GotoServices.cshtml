@using NHS111.Models.Models.Web
@using NHS111.Models.Models.Web.FromExternalServices
@model  OutcomeViewModel
<script src="https://maps.google.com/maps/api/js?key=AIzaSyCv3YwvmRoueyoLcW2iiSPjVeHecU18hmA "
        type="text/javascript"></script>

<script src="/Scripts/geotools.js"
        type="text/javascript"></script>
@{
    var services = Model.GroupedDosServices.FirstOrDefault(s => s.OnlineDOSServiceType == OnlineDOSServiceType.GoTo).Services;
    var serviceCount = 0;


    string title;
    if (ViewData.Keys.Contains("VisitTitle"))
    {
        title = ViewData["VisitTitle"] as string;
    }
    else
    {
        serviceCount = services.Count(s => !s.CallbackEnabled && string.IsNullOrEmpty(s.ContactDetails));
        title = serviceCount > 1 ? "There are " + serviceCount + " places you can visit" : "There is 1 place you can visit";
    }
}
    <details>
        <summary>
            <span class="details__arrow"></span>
            <span class="summary">Visit a service</span>
        </summary>
        <div>
        @if (Model.Id == "Dx08" && Model.UserInfo.CurrentAddress.IsPostcodeFirst)
        {
        <section class="callout callout--info">
            <div class="reading-width">
                    <p>As you may not see your usual GP, let the service know which medicines you take.</p>
            </div>
        </section> 
        }
        <div class="service-map" role="presentation"></div>
        <div class="cards">

            @foreach (var service in services.Where(s => !s.CallbackEnabled && string.IsNullOrEmpty(s.ContactDetails)))
            {
                <div class="card">
                    <h3>@WebUtility.HtmlDecode(service.Name)</h3>
                    <p>
                        @foreach (String address in service.AddressLines)
                        {
                            @WebUtility.HtmlDecode(address)<br />
                        }
                    </p>
                    <p class="card__details">@WebUtility.HtmlDecode(service.ServiceOpeningTimesMessage)</p>
                    @using (Html.BeginForm("GetDirections", "Outcome", FormMethod.Post))
                    {
                        @Html.HiddenFor(m => m.SessionId)
                        @Html.HiddenFor(m => m.JourneyId)
                        @Html.HiddenFor(m => m.JourneyJson)
                        @Html.HiddenFor(m => m.Id)
                        @Html.Hidden("SelectedServiceId", @service.Id)
                        @Html.Hidden("SelectedServiceName", @service.Name)
                        @Html.Hidden("SelectedServiceAddress", @service.Address)
                        <hr/>
                            <p>This service doesn't require an appointment</p>
                        <button class="button button--link" type="submit">Get directions</button>
                    }
                </div>
            }
        </div>
        </div>
    </details>

<script type="text/javascript">

    var locations = [
        @{int i = 0; }
        @if (Model.DosCheckCapacitySummaryResult.Success != null)
        {
            foreach (var service in services)
            {
                @Html.Raw("['" + service.Name + "',OsGridRef.osGridToLatLon(new OsGridRef(" + service.Eastings + ", " + service.Northings + "), LatLon.datum.OSGB36).lat, OsGridRef.osGridToLatLon(new OsGridRef(" + service.Eastings + ", " + service.Northings + "), LatLon.datum.OSGB36).lon, " + i + "],");
                i++;
            }
        }
    ];

    function initialise() {
        var map = new google.maps.Map($('.service-map')[0],
            {
                zoom: 10,
                center: new google.maps.LatLng(locations[0][1], locations[0][2]),
                mapTypeId: google.maps.MapTypeId.ROADMAP
            });
        var infowindow = new google.maps.InfoWindow();
        var marker, i;

        for (i = 0; i < locations.length; i++) {
            var pointerNo = i + 1;
            marker = new google.maps.Marker({
                position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                map: map
            });

            google.maps.event.trigger(map, "resize");

            google.maps.event.addListener(marker,
                'click',
                (function (marker, i) {
                    return function () {
                        infowindow.setContent(locations[i][0]);
                        infowindow.open(map, marker);
                    }
                })(marker, i));
        }
    }

    $("details:not([open])").has(".service-map").one("click", function () { initialise(); })
</script>