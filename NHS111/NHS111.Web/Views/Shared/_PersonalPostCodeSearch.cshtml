@using Newtonsoft.Json
@using NHS111.Models.Models.Web
@model  PersonalDetailsAddressViewModel

<fieldset>
    <legend>
        <h2>Location</h2>
    </legend>
    <h3>Current location</h3>
    <p class="form-info">We need this in case the person needing care requires emergency help.</p>

    <div class="form-group address-section">
        <div class="address-choose-postcode find-address-panel form-group">
            <label for="@Html.IdFor(m => m.PreviouslyEnteredPostcode)">Postcode</label>
            @Html.TextBoxFor(m => m.PreviouslyEnteredPostcode, new { @class = "form-control form-control-8-chars", })
            <button type="button" class="button--next button--secondary find-address" id="findMyAddress">Find address</button>
            <p style="display: none;" id="no-results-message">Sorry, we couldn't find an address using that postcode.<br />Please enter your address below or try a different postcode.</p>
        </div>

        <div class="address-list" style="display: none;">
            <label for="@Html.IdFor(m => m.SelectedAddressFromPicker)">What is the address?</label>
            <div class="form-group @(@ViewData.ModelState.IsValidField("AddressInfoViewModel.AddressPicker") ? "" : "form-group-error")">
                @Html.ValidationMessageFor(m => m.AddressPicker, "Please select the address")
                @Html.DropDownListFor(m => m.SelectedAddressFromPicker, Model.AddressPicker, new { @class = "select-address" })
                @Html.HiddenFor(m => m.AddressOptions)
            </div>
        </div>

        <div class="address-display-info" style="display: none;">
            <p class="address-info"></p>
            <button class="button--link address-change" style="margin-top: 0px;">Change address</button>
        </div>

        <div id="addressPanel" class="address-panel" style="display: none;">
            <fieldset>
                <legend class="form-label">Building and street</legend>
                <div class="form-group inline-details @(@ViewData.ModelState.IsValidField("AddressInfoViewModel.AddressLine1") ? "" : "form-group-error")">
                    @Html.LabelFor(m => m.AddressLine1, "Address line 1", new { @class = "util-visuallyhidden" })
                    @Html.ValidationMessageFor(m => m.AddressLine1, "Please enter the first line of the address")
                    @Html.TextBoxFor(m => m.AddressLine1, new { @class = "form-control address-line-1" })
                </div>
                <div class="inline-details">
                    @Html.LabelFor(m => m.AddressLine2, "Address line 2", new { @class = "util-visuallyhidden" })
                    @Html.TextBoxFor(m => m.AddressLine2, new { @class = "form-control address-line-2" })
                </div>
            </fieldset>
            <div class="form-group inline-details @(@ViewData.ModelState.IsValidField("AddressInfoViewModel.City") ? "" : "form-group-error")">
                @Html.LabelFor(m => m.City, "Town or city")
                @Html.ValidationMessageFor(m => m.City, "Please enter a city")
                @Html.TextBoxFor(m => m.City, new { @class = "form-control address-city" })
            </div>
            <div class="form-group inline-details @(@ViewData.ModelState.IsValidField("AddressInfoViewModel.Postcode") ? "" : "form-group-error")">
                @Html.LabelFor(m => m.Postcode)
                @Html.ValidationMessageFor(m => m.Postcode)
                @Html.TextBoxFor(m => m.Postcode, new { @class = "form-control address-postcode" })
            </div>
        </div>
            
    </div>


    <h3>Home address</h3>
    <p>This is the home address of the person needing care. It’s used to check who they are and links to their NHS record.</p>

    <div class="form-group address-section">
        <div class="address-choose-postcode find-address-panel form-group">
            <label for="@Html.IdFor(m => m.PreviouslyEnteredPostcode)">Postcode</label>
            @Html.TextBoxFor(m => m.PreviouslyEnteredPostcode, new { @class = "form-control form-control-8-chars", })
            <button type="button" class="button--next button--secondary find-address" id="findMyAddress">Find address</button>
            <p style="display: none;" id="no-results-message">Sorry, we couldn't find an address using that postcode.<br />Please enter your address below or try a different postcode.</p>
        </div>

        <div class="address-list" style="display: none;">
            <label for="@Html.IdFor(m => m.SelectedAddressFromPicker)">What is the address?</label>
            <div class="form-group @(@ViewData.ModelState.IsValidField("AddressInfoViewModel.AddressPicker") ? "" : "form-group-error")">
                @Html.ValidationMessageFor(m => m.AddressPicker, "Please select the address")
                @Html.DropDownListFor(m => m.SelectedAddressFromPicker, Model.AddressPicker, new { @class = "select-address" })
                @Html.HiddenFor(m => m.AddressOptions)
            </div>
        </div>

        <div class="address-display-info" style="display: none;">
            <p class="address-info"></p>
            <button class="button--link address-change" style="margin-top: 0px;">Change address</button>
        </div>

        <div id="addressPanel" class="address-panel" style="display: none;">
            <fieldset>
                <legend class="form-label">Building and street</legend>
                <div class="form-group inline-details @(@ViewData.ModelState.IsValidField("AddressInfoViewModel.AddressLine1") ? "" : "form-group-error")">
                    @Html.LabelFor(m => m.AddressLine1, "Address line 1", new { @class = "util-visuallyhidden" })
                    @Html.ValidationMessageFor(m => m.AddressLine1, "Please enter the first line of the address")
                    @Html.TextBoxFor(m => m.AddressLine1, new { @class = "form-control address-line-1" })
                </div>
                <div class="inline-details">
                    @Html.LabelFor(m => m.AddressLine2, "Address line 2", new { @class = "util-visuallyhidden" })
                    @Html.TextBoxFor(m => m.AddressLine2, new { @class = "form-control address-line-2" })
                </div>
            </fieldset>
            <div class="form-group inline-details @(@ViewData.ModelState.IsValidField("AddressInfoViewModel.City") ? "" : "form-group-error")">
                @Html.LabelFor(m => m.City, "Town or city")
                @Html.ValidationMessageFor(m => m.City, "Please enter a city")
                @Html.TextBoxFor(m => m.City, new { @class = "form-control address-city" })
            </div>
            <div class="form-group inline-details @(@ViewData.ModelState.IsValidField("AddressInfoViewModel.Postcode") ? "" : "form-group-error")">
                @Html.LabelFor(m => m.Postcode)
                @Html.ValidationMessageFor(m => m.Postcode)
                @Html.TextBoxFor(m => m.Postcode, new { @class = "form-control address-postcode" })
            </div>
        </div>

    </div>

</fieldset>




<script type="text/javascript">
    var foundAddresses = {}

    function findAddresses (postcode, element) {
        startPageLoadingIndicator('Searching for addresses matching ' + postcode + '...')
        $.ajax({
            type: "POST",
            url: "/Outcome/PostcodeLookup",
            data: { postCode: postcode },
            success: function (response) {
                showAddresses(response, element)
            },
            timeout: 5000,
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                console.log(textStatus)
            },
            complete: function () {
                stopPageLoadingIndicator();
            }
        });
    }


    function showAddresses (addresses, element) {
        $('#AddressInfoViewModel_AddressOptions').val(JSON.stringify(addresses))

        var options = '';
        $.each(addresses, function (key, value) {
            foundAddresses[value.UPRN] = value
            options += '<option value=' + value.UPRN + '>' + value.AddressLine1 + '</option>';
        })
        $('.select-address', element).empty().append(options)
        $('.address-choose-postcode', element).hide()
        $('.address-list', element).show()
    }

    function showAddressInfo (address, element) {
        $('.address-list', element).hide()
        $('.address-info', element).html(`${address.AddressLine1}<br>${address.AddressLine2}<br>${address.City}<br>${address.Postcode}`).show()
        $('.address-display-info', element).show()
    }

    function setAddress(address, element) {
        $('.address-line-1', element).val(address.AddressLine1)
        $('.address-line-2', element).val(address.AddressLine2)
        $('.address-city', element).val(address.City)
        $('.address-postcode', element).val(address.Postcode)
    }

    $('.find-address').click(function (e) {
        var parent = $(this).parents('.address-section')
        var postcode = $(this).siblings('input').val()
        if (valid_postcode(postcode)) findAddresses(postcode, parent)
        else console.log("Invalid postcode: " + postcode)
    })

    $('.select-address').change(function (e) {
        var parent = $(this).parents('.address-section')
        showAddressInfo(foundAddresses[$(this).val()], parent)
        setAddress(foundAddresses[$(this).val()], parent)
    })

    $('.address-change').click(function (e) {
        var parent = $(this).parents('.address-section')
        $('.address-list', parent).hide()
        $('.address-display-info', parent).hide()
        $('.address-panel', parent).show()

    })


    function runAddressValidation() {
        $("#AddressInfoViewModel_AddressLine1").valid();
        $("#AddressInfoViewModel_AddressLine2").valid();
        $("#AddressInfoViewModel_City").valid();
        $("#AddressInfoViewModel_County").valid();
        $("#AddressInfoViewModel_Postcode").valid();
    }

    function resetElements() {
        $(".address-panel").hide();
        $("#AddressList").hide();
        $("#no-results-message").hide();
        $("#AddressInfoViewModel_postcode-find").removeClass("validation-error-input");
        $("#AddressListPicker").removeClass("input-validation-error");
        $("#AddressInfoViewModel_AddressLine1").removeClass("input-validation-error");
        $("#AddressInfoViewModel_City").removeClass("input-validation-error");
        $("#AddressInfoViewModel_Postcode").removeClass("input-validation-error");
        setFields("@JsonConvert.SerializeObject(new AddressInfoViewModel())");
    }



    function setFields(result) {
        $("#AddressInfoViewModel_HouseNumber").val(result.HouseNumber);
        $("#AddressInfoViewModel_AddressLine1").val(result.AddressLine1);
        $("#AddressInfoViewModel_AddressLine2").val(result.AddressLine2);
        $("#AddressInfoViewModel_City").val(result.City);
        $("#AddressInfoViewModel_County").val(result.County);
        $("#AddressInfoViewModel_Postcode").val(result.Postcode);
    }

    function invalidatePostCode() {
        $("#manual-entry-link").hide();
        $("#AddressList").hide();
        $(".address-panel").show();
        $("#no-results-message").show();
        $("#AddressInfoViewModel_postcode-find").addClass("validation-error-input");
    }

    function valid_postcode(postcode) {
        postcode = postcode.replace(/\s/g, "");
        var regex = /^[A-Z]{1,2}[0-9]{1,2} ?[0-9][A-Z]{2}$/i;
        return regex.test(postcode);
    }

</script>