@using NHS111.Models.Models.Web
@model  LocationInfoViewModel

<fieldset>
    <legend>
        <h2>Location</h2>
    </legend>
    <h3>Current location</h3>
    <p class="form-info">We need this in case the person needing care requires emergency help.</p>

    <div class="form-group address-section">
        <div class="address-choose-postcode find-address-panel form-group" style="display: none;">
            <label for="@Html.IdFor(m => m.PatientCurrentAddress.PreviouslyEnteredPostcode)">Postcode</label>
            <span style="display: none;" class="address-no-results">Sorry, we couldn't find an address using that postcode.<br />Please try a different postcode or <button class="button--link address-change" style="margin-top: 0; display: inline; width: inherit;">enter address</button>.</span>
            @Html.TextBoxFor(m => m.PatientCurrentAddress.PreviouslyEnteredPostcode, new { @class = "form-control form-control-8-chars", })
            <button type="button" class="button--next button--secondary find-address" id="findMyAddress">Find address</button>
        </div>

        <div class="address-list" style="display: none;">
            <label for="@Html.IdFor(m => m.PatientCurrentAddress.SelectedAddressFromPicker)">What is the address?</label>
            <div class="form-group @(@ViewData.ModelState.IsValidField(Html.NameFor(m => m.PatientCurrentAddress.AddressPicker).ToString()) ? "" : "form-group-error")">
                @Html.ValidationMessageFor(m => m.PatientCurrentAddress.AddressPicker, "Please select the address")
                @Html.DropDownListFor(m => m.PatientCurrentAddress.SelectedAddressFromPicker, Model.PatientCurrentAddress.AddressPicker, new { @class = "select-address" })
            </div>
            <button class="button--link address-change" style="margin-top: 5px;">Change address</button>
        </div>

        <div class="address-display-info" style="display: none;">
            <p class="address-info"></p>
            <button class="button--link address-change" style="margin-top: 0px;">Change address</button>
        </div>

        <div id="addressPanel" class="address-panel">
            <fieldset>
                <legend class="form-label">Building and street</legend>
                <div class="form-group inline-details @(@ViewData.ModelState.IsValidField(Html.NameFor(m => m.PatientCurrentAddress.AddressLine1).ToString()) ? "" : "form-group-error")">
                    @Html.LabelFor(m => m.PatientCurrentAddress.AddressLine1, "Address line 1", new { @class = "util-visuallyhidden" })
                    @Html.ValidationMessageFor(m => m.PatientCurrentAddress.AddressLine1, "Please enter the first line of the address")
                    @Html.TextBoxFor(m => m.PatientCurrentAddress.AddressLine1, new { @class = "form-control address-line-1" })
                </div>
                <div class="inline-details">
                    @Html.LabelFor(m => m.PatientCurrentAddress.AddressLine2, "Address line 2", new { @class = "util-visuallyhidden" })
                    @Html.TextBoxFor(m => m.PatientCurrentAddress.AddressLine2, new { @class = "form-control address-line-2" })
                </div>
            </fieldset>
            <div class="form-group inline-details @(@ViewData.ModelState.IsValidField(Html.NameFor(m => m.PatientCurrentAddress.City).ToString()) ? "" : "form-group-error")">
                @Html.LabelFor(m => m.PatientCurrentAddress.City, "Town or city")
                @Html.ValidationMessageFor(m => m.PatientCurrentAddress.City, "Please enter a city")
                @Html.TextBoxFor(m => m.PatientCurrentAddress.City, new { @class = "form-control address-city" })
            </div>
            <div class="form-group inline-details @(@ViewData.ModelState.IsValidField(Html.NameFor(m => m.PatientCurrentAddress.Postcode).ToString()) ? "" : "form-group-error")">
                @Html.LabelFor(m => m.PatientCurrentAddress.Postcode)
                @Html.ValidationMessageFor(m => m.PatientCurrentAddress.Postcode)
                @Html.TextBoxFor(m => m.PatientCurrentAddress.Postcode, new { @class = "form-control address-postcode" })
            </div>
            <button class="button--secondary address-confirm" style="display: none;">Confirm address</button>
        </div>
            
    </div>


    <h3>Home address</h3>
    <p>This is the home address of the person needing care. It’s used to check who they are and links to their NHS record.</p>


    <fieldset class="form-group" style="margin-top: 0">
        <div>
            @Html.RadioButtonFor(m => m.HomeAddressSameAsCurrent, true, new { id = "home-address-same", name = "home-address", @class = "multiple-choice__input" })
            <label for="home-address-same" class="multiple-choice--radio">Same as current location</label>
        </div>

        <div>
            @Html.RadioButtonFor(m => m.HomeAddressSameAsCurrent, false, new { id = "home-address-different", name = "home-address", @class = "multiple-choice__input" })
            <label for="home-address-different" class="multiple-choice--radio">Enter different address</label>

            <div class="form-group address-section toggle-content panel">
                <div class="address-choose-postcode find-address-panel form-group" style="display: none;">
                    <label for="@Html.IdFor(m => m.PatientHomeAddreess.PreviouslyEnteredPostcode)">Postcode</label>
                    <span style="display: none;" class="address-no-results">Sorry, we couldn't find an address using that postcode.<br />Please try a different postcode or <button class="button--link address-change" style="margin-top: 0;  display: inline; width: inherit;">enter address</button>.</span>
                    @Html.TextBoxFor(m => m.PatientHomeAddreess.PreviouslyEnteredPostcode, new { @class = "form-control form-control-8-chars", })
                    <button type="button" class="button--next button--secondary find-address" id="findMyAddress">Find address</button>
                </div>

                <div class="address-list" style="display: none;">
                    <label for="home-address-picker">What is the address?</label>
                    <div class="form-group @(@ViewData.ModelState.IsValidField(Html.NameFor(m => m.PatientHomeAddreess.AddressPicker).ToString()) ? "" : "form-group-error")">
                        @Html.ValidationMessageFor(m => m.PatientHomeAddreess.AddressPicker, "Please select the address")
                        <select class="select-address" id="home-address-picker"></select>
                        <button class="button--link address-change" style="margin-top: 5px;">Change address</button>
                    </div>
                </div>

                <div class="address-display-info" style="display: none;">
                    <p class="address-info"></p>
                    <button class="button--link address-change" style="margin-top: 0px;">Change address</button>
                </div>

                <div id="addressPanel" class="address-panel">
                    <fieldset>
                        <legend class="form-label">Building and street</legend>
                        <div class="form-group inline-details @(@ViewData.ModelState.IsValidField(Html.NameFor(m => m.PatientHomeAddreess.AddressLine1).ToString()) ? "" : "form-group-error")">
                            @Html.LabelFor(m => m.PatientHomeAddreess.AddressLine1, "Address line 1", new { @class = "util-visuallyhidden" })
                            @Html.ValidationMessageFor(m => m.PatientHomeAddreess.AddressLine1, "Please enter the first line of the address")
                            @Html.TextBoxFor(m => m.PatientHomeAddreess.AddressLine1, new { @class = "form-control address-line-1" })
                        </div>
                        <div class="inline-details">
                            @Html.LabelFor(m => m.PatientHomeAddreess.AddressLine2, "Address line 2", new { @class = "util-visuallyhidden" })
                            @Html.TextBoxFor(m => m.PatientHomeAddreess.AddressLine2, new { @class = "form-control address-line-2" })
                        </div>
                    </fieldset>
                    <div class="form-group inline-details @(@ViewData.ModelState.IsValidField(Html.NameFor(m => m.PatientHomeAddreess.City).ToString()) ? "" : "form-group-error")">
                        @Html.LabelFor(m => m.PatientHomeAddreess.City, "Town or city")
                        @Html.ValidationMessageFor(m => m.PatientHomeAddreess.City, "Please enter a city")
                        @Html.TextBoxFor(m => m.PatientHomeAddreess.City, new { @class = "form-control address-city" })
                    </div>
                    <div class="form-group inline-details @(@ViewData.ModelState.IsValidField(Html.NameFor(m => m.PatientHomeAddreess.Postcode).ToString()) ? "" : "form-group-error")">
                        @Html.LabelFor(m => m.PatientHomeAddreess.Postcode)
                        @Html.ValidationMessageFor(m => m.PatientHomeAddreess.Postcode)
                        @Html.TextBoxFor(m => m.PatientHomeAddreess.Postcode, new { @class = "form-control address-postcode" })
                    </div>
                    <button class="button--secondary address-confirm" style="display: none;">Confirm address</button>
                </div>

            </div>

        </div>

    </fieldset>

</fieldset>




<script type="text/javascript">
    var foundAddresses = {}

    // JavaScript is enabled so we can show the whole flow
    $('.address-choose-postcode').show()
    $('.address-panel').hide()
    $('.address-confirm').show()

    function findAddresses (postcode, element) {
        startPageLoadingIndicator('Searching for addresses matching ' + postcode + '...')
        $.ajax({
            type: "POST",
            url: "/Outcome/PostcodeLookup",
            data: { postCode: postcode },
            success: function (response) {
                showAddresses(response, element)
            },
            timeout: 5000,
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                console.log(textStatus)
            },
            complete: function () {
                stopPageLoadingIndicator();
            }
        });
    }


    function showAddresses (addresses, element) {
        var options = '';
        $.each(addresses, function (key, value) {
            foundAddresses[value.UPRN] = value
            options += '<option value=' + value.UPRN + '>' + value.AddressLine1 + '</option>';
        })
        $('.select-address', element).empty().append(options)
        $('.address-choose-postcode', element).hide()
        $('.address-list', element).show()
    }

    function showAddressInfo(address, element) {
        var $info = $('.address-info', element)
        $('.address-panel', element).hide()
        $('.address-list', element).hide()
        $info.empty()
        setFields(address)
        if (address.AddressLine1) $info.append(address.AddressLine1 + "<br>")
        if (address.AddressLine2) $info.append(address.AddressLine2 + "<br>")
        if (address.City) $info.append(address.City + "<br>")
        if (address.Postcode) $info.append(address.Postcode)
        $info.show()
        $('.address-display-info', element).show()
    }

    function setAddress(address, element) {
        $('.address-line-1', element).val(address.AddressLine1)
        $('.address-line-2', element).val(address.AddressLine2)
        $('.address-city', element).val(address.City)
        $('.address-postcode', element).val(address.Postcode)
    }

    function changeAddress(parent) {
        $('.address-no-results', parent).removeClass('field-validation-error').hide()
        $('.address-choose-postcode', parent).hide()
        $('.address-list', parent).hide()
        $('.address-display-info', parent).hide()
        $('.address-panel', parent).show()
        $('.address-line-1', parent).focus()
    }

    $('.find-address').click(function (e) {
        var parent = $(this).parents('.address-section')
        var postcode = $(this).siblings('input').val()
        if (valid_postcode(postcode)) findAddresses(postcode, parent)
        else $('.address-no-results', parent).addClass('field-validation-error').show()
    })

    $('.select-address').change(function (e) {
        var parent = $(this).parents('.address-section')
        showAddressInfo(foundAddresses[$(this).val()], parent)
        setAddress(foundAddresses[$(this).val()], parent)
    })

    $('.address-change').click(function (e) {
        var parent = $(this).parents('.address-section')
        changeAddress(parent)
    })

    $('.address-confirm').click(function (e) {
        var parent = $(this).parents('.address-section')
        showAddressInfo({
            "AddressLine1": $('.address-line-1', parent).val(),
            "AddressLine2": $('.address-line-2', parent).val(),
            "City": $('.address-city', parent).val(),
            "Postcode": $('.address-postcode', parent).val()
        }, parent)
    })
    
    function setFields(result) {
        $("#AddressInfoViewModel_HouseNumber").val(result.HouseNumber);
        $("#AddressInfoViewModel_AddressLine1").val(result.AddressLine1);
        $("#AddressInfoViewModel_AddressLine2").val(result.AddressLine2);
        $("#AddressInfoViewModel_City").val(result.City);
        $("#AddressInfoViewModel_County").val(result.County);
        $("#AddressInfoViewModel_Postcode").val(result.Postcode);
    }

    function valid_postcode(postcode) {
        postcode = postcode.replace(/\s/g, "");
        var regex = /^[A-Z]{1,2}[0-9]{1,2} ?[0-9][A-Z]{2}$/i;
        return regex.test(postcode);
    }

</script>