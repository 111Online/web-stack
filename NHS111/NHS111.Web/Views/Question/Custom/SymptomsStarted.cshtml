@using System.Web.UI.HtmlControls
@using NHS111.Models.Models.Web
@using NHS111.Utils.Extensions
@inherits NHS111.Web.Views.Shared.DirectLinkingView<JourneyViewModel>

@{ Layout = "~/Views/Shared/_LayoutNhsUk.cshtml"; }

@section Title  {NHS 111 Online - @Model.TitleWithoutBullets}


@section HeadTop {
    @{ var url = string.Format("/{0}/{1}/{2}/", Url.Encode(Model.PathwayId), Url.Encode(Model.PathwayTitle), Url.Encode(Model.QuestionNo)); }
    <script>
        dataLayer = [{
            'virtualPageUrl': document.location.pathname + '@url',
            'virtualPageTitle': '@Model.TitleWithoutBullets'
        }];
    </script>
}

@section FeedbackSection {
    @{
        @Html.Partial("_FeedbackDetails", new FeedbackViewModel() { UserId = Model.SessionId.ToString(), PageData = new PageDataViewModel(PageDataViewModel.PageType.InlineCareAdvice, Model) })
    }
}

@using (Html.BeginForm("Navigation", "Question", FormMethod.Post, new { @class = "measure" }))
{
    @Html.HiddenFor(x => Model.Content)
    @Html.HiddenFor(x => Model.NextButtonText)
    for (var i = 0; i < Model.OrderedAnswers().Count; i++)
    {
        var answer = Model.OrderedAnswers()[i];
        @Html.Hidden(string.Format("Answers[{0}].Title", i), answer.Title)
        @Html.Hidden(string.Format("Answers[{0}].TitleWithoutSpaces", i), answer.TitleWithoutSpaces)
        @Html.Hidden(string.Format("Answers[{0}].SymptomDiscriminator", i), answer.SymptomDiscriminator)
        @Html.Hidden(string.Format("Answers[{0}].SupportingInformation", i), answer.SupportingInformation)
        @Html.Hidden(string.Format("Answers[{0}].Keywords", i), answer.Keywords)
        @Html.Hidden(string.Format("Answers[{0}].ExcludeKeywords", i), answer.ExcludeKeywords)
        @Html.Hidden(string.Format("Answers[{0}].ReportText", i), answer.ReportText)
        @Html.Hidden(string.Format("Answers[{0}].DispositionDisplayText", i), answer.DispositionDisplayText)
        @Html.Hidden(string.Format("Answers[{0}].Order", i), answer.Order)
        @Html.Hidden(string.Format("Answers[{0}].IsPositive", i), answer.IsPositive)
    }
    @Html.Partial("_CommonHiddenFieldsNode", Model)
    <input name="SelectedAnswer" type="hidden" id="@Model.Answers.First().TitleWithoutSpaces" value="@Newtonsoft.Json.JsonConvert.SerializeObject(Model.Answers.First())" />

    if (DirectLinkingFeature.IsEnabled)
    {
        Html.Raw("<!-- DIRECT LINK: " + Model.StepLink + " -->");
    }
    
    <div>
        <fieldset>
            <legend>
                <h1>How many days ago did your symptoms start?</h1>
            </legend>
            <div class="callout callout--info">
                <p>
                    Try to be as accurate as you can.  We only need to know about the last 10 days.
                </p>
                <p>
                    If your symptoms started today, enter '0'.
                </p>
            </div>

            <div class="form-group @(ViewData.ModelState.IsValid ? "" : "form-group-error") form-group-validation-override">
                @Html.ValidationMessage("SymptomsStart.Day")
                <input class="@(ViewData.ModelState.IsValidField("SymptomsStart.Day") ? "" : "input-validation-error") form-control form-textbox js-validate-number", style = "display: inline-block;", data-val="true" data-val-number="The field Day must be a number." id="SymptomsStart_Day" inputmode="numeric" maxlength="2" name="SymptomsStart.Day" pattern="[0-9]+", autocomplete = "off", value="@Request.Params["SymptomsStart.Day"]">
                <span class="form-hint" style="display: inline-block; margin-left: 15px;">days ago</span>
            </div>
        </fieldset>
    </div>

    if (!Model.NextButtonText.Equals("!hidden!"))
    {
        <button class="button--next" id="nextScreen" type="submit" name="Question" value="Question">@Model.NextButtonText</button>
    }

    if (!Model.IsFirstStep)
    {
        <button class="button--stacked button--previous button--link" id="previousScreen" type="submit" value="PreviousQuestion" name="PreviousQuestion" formnovalidate>Previous question</button>
    }
}
