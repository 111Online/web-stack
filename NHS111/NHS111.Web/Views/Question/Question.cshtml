@using NHS111.Models.Models.Web
@{ Layout = "~/Views/Shared/_LayoutNhsUk.cshtml"; }
@inherits NHS111.Web.Views.Shared.DirectLinkingView<JourneyViewModel>


@section Title  {NHS 111 Online - @Model.TitleWithoutBullets}


@section HeadTop {
    @{ var url = string.Format("/{0}/{1}/{2}/", Url.Encode(Model.PathwayId), Url.Encode(Model.PathwayTitle), Url.Encode(Model.QuestionNo)); }

    <script>
        var pageId = '@Model.PathwayId';
        dataLayer = [
        {
            'virtualPageUrl': document.location.pathname + '@url',
            'virtualPageTitle': '@Model.TitleWithoutBullets'
        }];
    </script>
}

@section FeedbackSection {
    @Html.Partial("_FeedbackDetails", new FeedbackViewModel() { UserId = Model.SessionId.ToString(), PageId = Request.Url.GetComponents(UriComponents.PathAndQuery, UriFormat.SafeUnescaped) + "/" + Model.Id })
}

@functions {

    string WriteDirectLink(JourneyViewModel model)
    {
        if (DirectLinkingFeature.IsEnabled)
        {
            return "<!-- DIRECT LINK: " + model.StepLink + " -->";
        }

        return "";
    }

}

@using (Html.BeginForm("Navigation", "Question", FormMethod.Post))
{
    @Html.HiddenFor(x => Model.SessionId)
    @Html.HiddenFor(x => Model.JourneyId)
    @Html.HiddenFor(x => Model.Id)
    @Html.HiddenFor(x => Model.JourneyJson)
    @Html.HiddenFor(x => Model.PathwayId)
    @Html.HiddenFor(x => Model.PathwayNo)
    @Html.HiddenFor(x => Model.PathwayTitle)
    @Html.HiddenFor(x => Model.EntrySearchTerm)
    @Html.HiddenFor(x => Model.DigitalTitle)
    @Html.HiddenFor(x => Model.UserInfo.Demography.Age)
    @Html.HiddenFor(x => Model.UserInfo.Demography.Gender)
    @Html.HiddenFor(x => Model.Title)
    @Html.HiddenFor(x => Model.SymptomDiscriminatorCode)
    @Html.HiddenFor(x => Model.QuestionNo)
    @Html.HiddenFor(x => Model.StateJson)
    @Html.HiddenFor(x => Model.FilterServices)

    @Html.Raw(WriteDirectLink(Model))

    for (int i = 0; i < Model.CollectedKeywords.Keywords.Count; i++)
    {
        @Html.HiddenFor(model => Model.CollectedKeywords.Keywords[i].Value)
        @Html.HiddenFor(model => Model.CollectedKeywords.Keywords[i].IsFromAnswer)
    }

    for (int i = 0; i < Model.CollectedKeywords.ExcludeKeywords.Count; i++)
    {
        @Html.HiddenFor(model => Model.CollectedKeywords.ExcludeKeywords[i].Value)
        @Html.HiddenFor(model => Model.CollectedKeywords.ExcludeKeywords[i].IsFromAnswer)
    }

    <fieldset>
        <legend>
            <h1 class="heading-large">@Model.TitleWithoutBullets</h1>
        </legend>
        
        @foreach (var bullet in Model.Bullets) {
            <span class="red">@bullet</span>
        }
        @if (!String.IsNullOrWhiteSpace(Model.Rationale)) {
            <div class="callout callout--info">
                <p>@Html.Raw(@Model.RationaleHtml)</p>
            </div>
        }
        <div id="answers">

            @foreach (var answer in Model.OrderedAnswers()) {
                <div class="form-group multiple-choice">

                    <input name="SelectedAnswer" type="radio" class="multiple-choice__input" required id="@answer.TitleWithoutSpaces" value="@Newtonsoft.Json.JsonConvert.SerializeObject(answer)" />
                    <label for="@answer.TitleWithoutSpaces" class="multiple-choice--radio">@answer.Title</label>


                    @if (!String.IsNullOrWhiteSpace(answer.SupportingInformation)) {
                        
                        @Html.Partial("_HiddenText", new HiddenTextViewModel() { Summary = "What does this mean?", Details = new[] { Html.Encode(@Html.Raw(answer.SupportingInformationHtml)) } })

                    }

                    @*if (!String.IsNullOrWhiteSpace(answer.SupportingInformationHtml)) {

                        <div class="js-help-text-link-message">@Html.Raw(answer.SupportingInformationHtml)</div>

                    }*@
                </div>
            }
        </div>
    </fieldset>

    <button class="button--next" id="nextScreen" type="submit" name="Question" value="Question">Next question</button>
    if (!Model.IsFirstStep)
    {
        <button class="button--stacked button--previous button--link" id="previousScreen" type="submit" value="PreviousQuestion" name="PreviousQuestion" formnovalidate>Change my previous answer</button>
    }
    /* Not working, might need to POST to search?
    else
    {
        <button class="button--stacked button--previous button--link" id="previousScreen" onclick="history.back(-1)" type="submit" name="PreviousQuestion">Go back to search</button>
    }*/
}
